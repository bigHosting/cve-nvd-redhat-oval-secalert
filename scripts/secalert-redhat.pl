#!/usr/bin/perl

use strict;
use warnings;

# check if modules exist
eval { require XML::Simple; };
if ($@) { die "[*]: $0: ERROR: require module XML::Simple: can't load module $@\n on CentOS: yum install perl-XML-Simple";}

eval { require utf8; };
if ($@) { die "[*]: $0: ERROR: require module utf8: can't load module $@\n on CentOS: yum install perl-utf8-all";}

eval { require Mail::Sendmail; };
if ($@) { die "[*]: $0: ERROR: require module Mail::Sendmail: can't load module: $@\n on CentOS: yum install perl-Mail-Sendmail";}

use utf8;
use XML::Simple;
#use Data::Dumper 'Dumper';
use POSIX qw(strftime);
use Mail::Sendmail;

binmode(STDIN,  ':encoding(utf8)');
binmode(STDOUT, ':encoding(utf8)');
binmode(STDERR, ':encoding(utf8)');

# http://www.allmyscripts.com/Perl_programming/remove_duplicates.html
#sub uniq_array
#{
#        my @a = @_;
#        my %seen = ();
#        my @result = grep { !$seen{$_}++ } @a;
#        return (@a);
#}
sub uniq {
  my (@input) = @_;
  my %all = ();
  @all{@input} = 1;
  return (keys %all);
}

my $date_today     = strftime "%Y-%m-%d", (localtime(time()) );
my $date_yesterday = strftime "%Y-%m-%d", ( localtime (time() - 24*60*60) );
my $xml            = XML::Simple->new;

my $ref;

if (not($ref = XMLin('/var/www/SITES/secalert.sec.domain.com/data/REDHAT/com.redhat.rhsa-RHEL6.xml',
                   ForceArray => [ 'reference', 'package', 'platform', 'bugzilla', 'cve' ])))
{
        die ("[*]: $0: ERROR: XMLin: Could not parse file: $!\n");
}
#print Dumper($conf);
#my %colors = (
#        W  => "\033[0m",  # white (normal)
#        R  => "\033[31m", # red
#        G  => "\033[32m", # green
#        O  => "\033[33m", # orange
#        B  => "\033[34m", # blue
#        P  => "\033[35m", # purple
#        C  => "\033[36m", # cyan
#        GR => "\033[37m", # gray
#        BB => "\033[1m",  # Bold
#        NB => "\033[0m",  # Not bold
#        F  => "\033[5m",  # Flash
#        NF => "\033[25m"  # Not flash
#);
#
#print $colors{R} . "TEST" . $colors{W} . "\n";

my  $alert = '';

# loop through all entries
foreach my $rhsa ( sort keys %{ $ref->{definitions}->{definition} } ) {

        # define the entry
        my $entry = $ref->{definitions}->{definition}->{$rhsa};

        # we need this in the beginning so we cam match dates
        my $advisory_issued_date  = "NA";
        if ( defined ( $entry->{'metadata'}->{'advisory'}->{'issued'}->{'date'} ))
        {
                $advisory_issued_date = $entry->{'metadata'}->{'advisory'}->{'issued'}->{'date'};
        }

        my $advisory_updated_date = "NA";
        if ( defined ( $entry->{'metadata'}->{'advisory'}->{'updated'}->{'date'} ))
        {
                $advisory_updated_date = $entry->{'metadata'}->{'advisory'}->{'updated'}->{'date'};
        }

        next if ( ( $advisory_updated_date !~ m/$date_today|$date_yesterday/) || ($advisory_issued_date !~ m/$date_today|$date_yesterday/) );


        # RHSA ID and TITLE
        my $title    = "NA";
        my ( $year, $num ) = 'NA';
        my $rhsa_id = '';
        if ( defined ( $entry->{'metadata'}->{'title'} ) )
        {
                $title        = $entry->{'metadata'}->{'title'};
                ($year, $num) = ($title =~ m{(?:^RHSA-)(\d{4})(?::)(\d+)(?::)});
                $rhsa_id      = "RHSA-$year:$num";
        }
        $alert .= "\nID: $rhsa_id\n";
        $alert .= "TITLE: " . $title . "\n";

        # SEVERITY
        my $severity = "NA";
        if ( defined $entry->{'metadata'}->{'advisory'}->{'severity'} )
        {
                $severity = $entry->{'metadata'}->{'advisory'}->{'severity'};
        }
        $alert .= "SEVERITY: " . $severity . "\n";


        my $description = "NA";
        if ( defined ( $entry->{'metadata'}->{'description'}) )
        {
                $description = $entry->{'metadata'}->{'description'};
        }
        $alert .= "DESCRIPTION: " . $description . "\n";


        $alert .= "DATE_ISSUED: " . $advisory_issued_date . "\n";
        $alert .= "DATE_UPDATED: " . $advisory_updated_date . "\n";

        # CVE info
        if (defined ($entry->{metadata}->{advisory}->{cve}))
        {
                # this needs ForceArray in the XMLin options
                if ( ref ( $entry->{metadata}->{advisory}->{cve}) eq 'ARRAY' )
                {
                        foreach my $cve ( @{ $entry->{metadata}->{advisory}->{cve} })
                        {
                                if ( defined ( $cve->{content} ) )
                                {
                                        $alert .= "CVE/CWE: " . $cve->{content};
                                }

                                if ( defined ( $cve->{impact} ) )
                                {
                                        $alert .= ", impact: " . $cve->{impact};
                                }

                                if ( defined ( $cve->{cvss2} ) )
                                {
                                        $alert .= ", cvss2 score: " . $cve->{cvss2};
                                }

                                $alert .= "\n";
                                #print Dumper($cve);
                        }
                }
        }


        # class: patch
        my $class = "NA";
        if ( defined ( $entry->{'class'} ))
        {
                $class = $entry->{'class'} ;
        }
        $alert .= "CLASS: " . $class . "\n";




        # REFERENCE URLs
        my ( @ref_urls ) = ();
        if (defined ($entry->{metadata}->{reference}))
        {
                if ( ref ( $entry->{metadata}->{reference}) eq 'ARRAY' )
                {
                        # this needs ForceArray in the XMLin options
                        foreach my $reference ( @{ $entry->{metadata}->{reference} })
                        {
                                if ( defined ( $reference->{ref_url} ) )
                                {
                                        push ( @ref_urls, $reference->{ref_url} );
                                }
                                #print Dumper($reference);
                        }
                } else {
                       push ( @ref_urls, $entry->{metadata}->{reference}->{ref_url} );
                }
                $alert .= "REF_URLs:\n" . join ( "\n", @ref_urls ) . "\n";
        }



        # BUGZILLA
        my ( @bugzillas ) = ();
        if (defined ( $entry->{metadata}->{advisory}->{bugzilla} ))
        {



                if ( ref ( $entry->{metadata}->{advisory}->{bugzilla} ) eq 'HASH' )
                {
                        foreach my $bugzilla ( keys %{ $entry->{metadata}->{advisory}->{bugzilla} } )
                        {
                                if ( defined ( $entry->{metadata}->{advisory}->{bugzilla}->{$bugzilla}->{href} ))
                                {
                                        push ( @bugzillas, $entry->{metadata}->{advisory}->{bugzilla}->{$bugzilla}->{href} );
                                }
                        }
                }
                #else {
                #       push ( @bugzillas, $entry->{metadata}->{advisory}->{bugzilla} );
                #}
                $alert .= "BUGZILLA:\n" . join ( "\n", @bugzillas ) . "\n";
        }



        # Platform
        my @platform = ();
        if ( defined ($entry->{'metadata'}->{'affected'}->{'platform'} ) )
        {
                if ( ref ( $entry->{'metadata'}->{'affected'}->{'platform'} ) eq 'ARRAY')
                {
                        foreach my $platform_element ( @{ $entry->{'metadata'}->{'affected'}->{'platform'} } )
                        {
                                push ( @platform, $platform_element );
                        }
                } else {
                        push (@platform, $entry->{'metadata'}->{'affected'}->{'platform'} );
                }
                $alert .= "PLATFORM: " . join (",", @platform ) . "\n";

        }

        $alert .= "\n\n\n";

}

#print Dumper(%cve);

if ( length ($alert) > 100)
{
        # if manually testing, print on screen
        print $alert;

        my %mail = (
            from => 'securityteam@domain.com',
            to => 'gvasiliu@domain.com',
            subject => "Vulnerability report for REDHAT, published $date_yesterday and $date_today"
        );

        $mail{body}=$alert;
        sendmail(%mail) || print "Error in sending email\n";

}

