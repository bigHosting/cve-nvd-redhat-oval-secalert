#!/usr/bin/perl

use strict;
use warnings;

# check if modules exist
eval { require XML::Simple; };
if ($@) { die "[*]: $0: ERROR: require module XML::Simple: can't load module $@\n on CentOS: yum install perl-XML-Simple";}

eval { require utf8; };
if ($@) { die "[*]: $0: ERROR: require module utf8: can't load module $@\n on CentOS: yum install perl-utf8-all";}

eval { require Mail::Sendmail; };
if ($@) { die "[*]: $0: ERROR: require module Mail::Sendmail: can't load module: $@\n on CentOS: yum install perl-Mail-Sendmail";}

use utf8;
use XML::Simple;
use Data::Dumper 'Dumper';
use POSIX qw(strftime);
use Mail::Sendmail;

binmode(STDIN,  ':encoding(utf8)');
binmode(STDOUT, ':encoding(utf8)');
binmode(STDERR, ':encoding(utf8)');

# http://www.allmyscripts.com/Perl_programming/remove_duplicates.html
#sub uniq_array
#{
#        my @a = @_;
#        my %seen = ();
#        my @result = grep { !$seen{$_}++ } @a;
#        return (@a);
#}
sub uniq {
  my (@input) = @_;
  my %all = ();
  @all{@input} = 1;
  return (keys %all);
}

my $skip           = "DO NOT USE THIS CANDIDATE NUMBER";
my $date_today     = strftime "%Y-%m-%d", (localtime(time()) );
my $date_yesterday = strftime "%Y-%m-%d", ( localtime (time() - 24*60*60) );
my $xml            = XML::Simple->new;

my $ref;
my  $alert = '';

foreach my $xml ( 'com.ubuntu.xenial.cve.oval.xml', 'com.ubuntu.precise.cve.oval.xml', 'com.ubuntu.trusty.cve.oval.xml' )
{

        if (not($ref = XMLin( "/var/www/SITES/secalert.sec.domain.com/data/UBUNTU/" . $xml, ForceArray => [ 'reference', 'platform', 'bug', 'ref' ] ) ))
        {
                print ("[*]: $0: ERROR: XMLin: Could not parse file: $!\n");
                next;
        }

        # loop through all entries
        foreach my $rhsa ( sort keys %{ $ref->{definitions}->{definition} } )
        {

        # define the entry
                my $entry = $ref->{definitions}->{definition}->{$rhsa};

                # we need this in the beginning so we cam match dates
                my $date  = "NA";
                if ( defined ( $entry->{'metadata'}->{'advisory'}->{'public_date'} ))
                {
                        $date = $entry->{'metadata'}->{'advisory'}->{'public_date'};
                }

                next if ($date !~ m/$date_today|$date_yesterday/);


                # RHSA ID and TITLE
                my $title    = "NA";
                my ( $temp1, $temp2 ) = 'NA';
                my $cve_id = '';
                if ( defined ( $entry->{'metadata'}->{'title'} ) )
                {
                        $title        = $entry->{'metadata'}->{'title'};

                        # make sure title starts w CVE
                        next if ( $title !~ m/^CVE/ );

                        ($temp1, $temp2) = ($title =~ m{(?:^CVE-)(\d+)(?:-)(\d+)(?:\s+)});
                        $cve_id      = "CVE-$temp1-$temp2";
                }
                $alert .= "\nID: $cve_id\n";
                $alert .= "TITLE: " . $title . "\n";

                # SEVERITY
                my $severity = "NA";
                if ( defined $entry->{'metadata'}->{'advisory'}->{'severity'} )
                {
                        # sometimes we see empty hash in the description
                        if ( ref ( $entry->{'metadata'}->{'advisory'}->{'severity'} ) ne 'HASH' )
                        {
                                $severity = $entry->{'metadata'}->{'advisory'}->{'severity'};
                        }
                }
                $alert .= "SEVERITY: " . $severity . "\n";


                my $description = "NA";
                if ( defined ( $entry->{'metadata'}->{'description'}) )
                {
                        if ( ref ( $entry->{'metadata'}->{'description'}) ne 'HASH' )
                        {
                                $description = $entry->{'metadata'}->{'description'};
                        }
                }
                $alert .= "DESCRIPTION: " . $description . "\n";


                $alert .= "DATE: " . $date . "\n";


                # class: patch
                my $class = "NA";
                if ( defined ( $entry->{'class'} ))
                {
                        $class = $entry->{'class'} ;
                }
                #next if ( $class eq 'inventory'); # there is only 1 item in com.ubuntu.xenial.cve.oval.xml that does not have ticle starting w CVE
                $alert .= "CLASS: " . $class . "\n";



                # REFERENCE URLs
                my ( @ref_urls ) = ();
                if (defined ($entry->{metadata}->{reference}))
                {
                        if ( ref ( $entry->{metadata}->{reference}) eq 'ARRAY' )
                        {
                                # this needs ForceArray in the XMLin options
                                foreach my $reference ( @{ $entry->{metadata}->{reference} })
                                {
                                        if ( defined ( $reference->{ref_url} ) )
                                        {
                                                push ( @ref_urls, $reference->{ref_url} );
                                        }
                                        #print Dumper($reference);
                                }
                        } else {
                       push ( @ref_urls, $entry->{metadata}->{reference}->{ref_url} );
                        }
                        $alert .= "REF_URLs:\n" . join ( "\n", @ref_urls ) . "\n";
                }

                # REF
                my ( @ref ) = ();
                if (defined ($entry->{metadata}->{advisory}->{'ref'}))
                {
                        if ( ref ( $entry->{metadata}->{advisory}->{'ref'}) eq 'ARRAY' )
                        {
                                # this needs ForceArray in the XMLin options
                                foreach my $reference ( @{ $entry->{metadata}->{advisory}->{'ref'} })
                                {
                                        push ( @ref, $reference );
                                        #print Dumper($reference);
                                }
                        } else {
                               push ( @ref, $entry->{metadata}->{advisory}->{'ref'} );
                        }
                        $alert .= "REF:\n" . join ( "\n", @ref ) . "\n";
                }


                # BUG
                my ( @bugs ) = ();
                if (defined ( $entry->{metadata}->{advisory}->{bug} ))
                {
                        if ( ref ( $entry->{metadata}->{advisory}->{bug} ) eq 'ARRAY' )
                        {
                                foreach my $bug ( @{ $entry->{metadata}->{advisory}->{bug} } )
                                {
                                                 push ( @bugs, $bug );
                                }
                        }

                        if ( ref ( $entry->{metadata}->{advisory}->{bug} ) eq 'SCALAR' )
                        {
                               push ( @bugs, $entry->{metadata}->{advisory}->{bug} );
                        }
                        $alert .= "BUG:\n" . join ( "\n", @bugs ) . "\n";
                }



                # Platform
                my @platform = ();
                if ( defined ($entry->{'metadata'}->{'affected'}->{'platform'} ) )
                {
                        if ( ref ( $entry->{'metadata'}->{'affected'}->{'platform'} ) eq 'ARRAY')
                        {
                                foreach my $platform_element ( @{ $entry->{'metadata'}->{'affected'}->{'platform'} } )
                                {
                                        push ( @platform, $platform_element );
                                }
                        } else {
                                push (@platform, $entry->{'metadata'}->{'affected'}->{'platform'} );
                        }
                        $alert .= "PLATFORM: " . join (",", @platform ) . "\n";

                }


        }
        $alert .= "\n\n\n";
}

if ( length ($alert) > 100)
{
        print $alert;
        my %mail = (
            from => 'securityteam@domain.com',
            to  => 'securityteam@domain.com',
            subject => "Vulnerability report for UBUNTU, published $date_yesterday and $date_today"
        );

        $mail{body}=$alert;
        sendmail(%mail) || print "Error in sending email\n";
}

