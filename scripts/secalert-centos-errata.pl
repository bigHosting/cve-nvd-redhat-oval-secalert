#!/usr/bin/perl

use warnings;
use strict;

# check if modules exist
eval { require XML::Simple; };
if ($@) { die "[*]: $0: ERROR: require module XML::Simple: can't load module $@\n on CentOS: yum install perl-XML-Simple";}

eval { require utf8; };
if ($@) { die "[*]: $0: ERROR: require module utf8: can't load module $@\n on CentOS: yum install perl-utf8-all";}

eval { require Mail::Sendmail; };
if ($@) { die "[*]: $0: ERROR: require module Mail::Sendmail: can't load module: $@\n on CentOS: yum install perl-Mail-Sendmail";}

use utf8;
use XML::Simple;
use Data::Dumper 'Dumper';
use POSIX qw(strftime);
use Mail::Sendmail;


binmode(STDIN,  ':encoding(utf8)');
binmode(STDOUT, ':encoding(utf8)');
binmode(STDERR, ':encoding(utf8)');


my $date_today     = strftime "%Y-%m-%d", (localtime(time()) );
my $date_yesterday = strftime "%Y-%m-%d", ( localtime (time() - 24*60*60) );

my $text = '';

#  force cve to be ARRAY
my $xmlerrata;

if ( ! -f '/var/www/SITES/secalert.sec.domain.com/data/CENTOS/errata.latest.xml' )
{
        die ("[*]: $0: ERROR: open: Could not find file: $!\n");
}

if (not( $xmlerrata = XMLin( '/var/www/SITES/secalert.sec.domain.com/data/CENTOS/errata.latest.xml', ForceArray => [ 'packages', 'os_arch' ] )))
{
        die ("[*]: $0: ERROR: XMLin: Could not parse file: $!\n");
}

#print Dumper($ref);

# Go through each <errata>
foreach my $advisory (sort(keys(%{$xmlerrata})))
{
        # Restore "proper" name of adivsory
        my $advid = $advisory;
        $advid =~ s/--/:/;

        # Only consider CentOS (Security) errata
        unless($advisory =~ /^CESA/)
        {
                #print ("Skipping $advid\n"); 
                next;
        }

        # Start processing
        #print ("Processing $advid\n");

        # Generate OVAL ID for security errata
        # my $ovalid = "";
        # if ($advid =~ /CESA/)
        #{
                 #if ($advid =~ /CESA-(\d+):(\d+)/)
                 #{
                         #$ovalid = "oval:com.redhat.rhsa:def:$1".sprintf("%04d", $2);
                         #print("Processing $advid -- OVAL ID is $ovalid\n");
                 #}
                 #}
        #}
        #print Dumper ($xmlerrata->{$advisory});

        # skip if we don't have a date
        next if (! defined ( $xmlerrata->{$advisory}->{issue_date} ));

        # skip if this is not a Security Advisory
        next if($xmlerrata->{$advisory}->{type} ne "Security Advisory");

        # send alerts for today and yesterday
        next if ( $xmlerrata->{$advisory}->{issue_date} !~ m/$date_today|$date_yesterday/);


        $text  = "ID: " . $advid . "\n";

        # SEVERITY
        if (defined ($xmlerrata->{$advisory}->{severity}))
        {
                $text .= "SEVERITY: " . $xmlerrata->{$advisory}->{severity} . "\n";
        }

        # SYNOPSIS
        if (exists ($xmlerrata->{$advisory}->{synopsis}))
        {
                $text .= "SYNOPSIS: " . $xmlerrata->{$advisory}->{synopsis} . "\n";
        }

        # DESCRIPTION
        if (defined ($xmlerrata->{$advisory}->{description}))
        {
                $text .= "DESCRIPTION: " . $xmlerrata->{$advisory}->{description} . "\n";
        }

        $text .= "TYPE: Security Advisory\n";
        $text .= "ISSUED: " . $xmlerrata->{$advisory}->{issue_date} . "\n";

        # PACKAGES
        if (defined ($xmlerrata->{$advisory}->{packages}))
        {
                if ( scalar (@{ $xmlerrata->{$advisory}->{packages} }) > 0 )
                {
                        $text .= "NEW PACKAGES available:\n" . join ("\n", @{ $xmlerrata->{$advisory}->{packages} });
                }
        }

        my @references;
        if (defined ($xmlerrata->{$advisory}->{references}))
        {
                if ( length ( $xmlerrata->{$advisory}->{references}) > 0 )
                {
                        @references= (split / +/, $xmlerrata->{$advisory}->{references});
                        $text .= "REFERENCES:\n" . join ("\n", @references);
                }
        }

       $text .= "\n\n";

#      "notes" : "Not available",
#      "severity" : "Important",
#      "from" : "centos-announce@centos.org",
#      "solution" : "Not available",
#      "os_release" : "6",
#      "release" : "1",
#      "os_arch" : [
#         "x86_64",
#         "i686"
#      ],
#      "product" : "CentOS Linux"
#   },

}

# let's make sure there is something to send
if ( length ( $text ) > 50)
{
        print ($text);

        my %mail = (
            from => 'securityteam@domain.com',
            to => 'puppetmasters@domain.com',
            cc => 'securityteam@domain.com',
            subject => "Vulnerability report for CENTOS errata, published $date_yesterday and $date_today"
        );
        $mail{body}=$text;
        sendmail(%mail) || print "Error in sending email\n";
}

